<?php

namespace App\Traits\Publisher;

use App\Helper\Static\Methods;
use App\Models\Transaction;
use Carbon\Carbon;
use Illuminate\Support\Facades\DB;

trait SalesGraph
{

    public function getTopFiveSales()
    {
        return Transaction::selectRaw('sum(sale_amount) as total_sales_amount, advertiser_name, sale_amount_currency, external_advertiser_id')
            ->fetchPublisher(auth()->user())
            ->whereBetween("transaction_date", [Carbon::now()->subMonths(3)->format("Y-m-01 00:00:00"), Carbon::now()->format("Y-m-t 23:59:59")])
            ->groupBy('advertiser_name')
            ->orderBy('total_sales_amount', 'DESC')
            ->take(5)
            ->get();
    }

    public function getSalePercentage()
    {
        $currentMonthTransaction = Transaction::select('sale_amount')
            ->fetchPublisher(auth()->user())
            ->whereMonth('transaction_date', date('m'))
            ->count();

        $previousMonthTransaction = Transaction::select('sale_amount')
            ->fetchPublisher(auth()->user())
            ->whereMonth('transaction_date', date('m', strtotime('-1 month')))
            ->count();

        return Methods::returnPerGrowth($previousMonthTransaction, $currentMonthTransaction);
    }

    public function getSalesCount()
    {
        return Transaction::select('sale_amount')
            ->fetchPublisher(auth()->user())
            ->sum('sale_amount');
    }

    public function setPerformanceSale()
    {
        $saleCount = $this->getSalesCount();
        $dailyCurrentSale = $this->getCurrentDailySale();
        $dailyCurrentSale = array_values($dailyCurrentSale);
        $dailyPreviousSale = $this->getPreviousDailySale();
        $dailyPreviousSale = array_values($dailyPreviousSale);

        $getMinMaxSale = array_merge($dailyCurrentSale, $dailyPreviousSale);
        $getMinMaxSale = array_values(array_filter($getMinMaxSale,function ($var) {
            return $var !== 0.0;
        }));
        $minSale = $maxSale = 0;
        if(count($getMinMaxSale))
        {
    info(max($getMinMaxSale);        }
        $salePercentage = $this->getSalePercentage();

        return [
            "count" => Methods::numberFormatShort($saleCount),
            "min_value" => $minSale,
            "max_value" => $maxSale,
            "dailyCurrentMonth" => $dailyCurrentSale,
            "dailyPreviousMonth" => $dailyPreviousSale,
            ...$salePercentage
        ];
    }

    public function getCurrentDailySale()
    {
        $transactions = Transaction::
            select(
                DB::raw("SUM(sale_amount) daily_sale_amount"),
                DB::raw('DATE_FORMAT(transaction_date, "%d") as trans_date')
            )
            ->whereMonth('transaction_date', date('m'))
            ->fetchPublisher(auth()->user())
            ->groupBy(DB::raw("DATE_FORMAT(transaction_date, '%d-%m-%Y')"))
            ->orderBy('transaction_date')
            ->get()
            ->pluck("daily_sale_amount", "trans_date")->toArray();

        $begin = new \DateTime(now()->format("Y-m-01 00:00:00"));
        $end = new \DateTime(now()->format("Y-m-t 23:59:59"));

        $interval = \DateInterval::createFromDateString('1 day');
        $period = new \DatePeriod($begin, $interval, $end);

        foreach ($period as $dt) {
            if(isset($transactions[$dt->format("d")]))
            {
                $number = number_format($transactions[$dt->format("d")], 2);
                $number = str_replace(',', '', $number);
                $transactions[$dt->format("d")] = $number;
            }
            else
            {
                $transactions[$dt->format("d")] = 0.00;
            }
        }

        ksort($transactions);

        return $transactions;

    }

    public function getPreviousDailySale()
    {
        $transactions = Transaction::
        select(
            DB::raw("SUM(sale_amount) daily_sale_amount"),
            DB::raw('DATE_FORMAT(transaction_date, "%d") as trans_date')
        )
            ->whereMonth('transaction_date', Carbon::now()->subMonths(1))
            ->fetchPublisher(auth()->user())
            ->groupBy(DB::raw("DATE_FORMAT(transaction_date, '%d-%m-%Y')"))
            ->orderBy('transaction_date')
            ->get()
            ->pluck("daily_sale_amount", "trans_date")->toArray();

        $begin = new \DateTime(now()->format("Y-m-01 00:00:00"));
        $end = new \DateTime(now()->format("Y-m-t 23:59:59"));

        $interval = \DateInterval::createFromDateString('1 day');
        $period = new \DatePeriod($begin, $interval, $end);

        foreach ($period as $dt) {
            if(isset($transactions[$dt->format("d")]))
            {
                $transactions[$dt->format("d")] = number_format($transactions[$dt->format("d")], 2);
            }
            else
            {
                $transactions[$dt->format("d")] = 0.00;
            }
        }

        ksort($transactions);

        return $transactions;

    }

}
